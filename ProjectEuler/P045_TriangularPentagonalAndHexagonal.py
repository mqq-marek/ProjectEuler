"""
Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:

Triangle	 	Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...
Pentagonal	 	Pn=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
Hexagonal	 	Hn=n(2n−1)	 	1, 6, 15, 28, 45, ...
It can be verified that T285 = P165 = H143 = 40755.

Find the next triangle number that is also pentagonal and hexagonal.


For this challenge you are given , , , where  and
where  represents triangular numbers,  represents pentagonal numbers and  is hexagonal.
It can be observed that all hexagonal numbers are triangular numbers so we'll handle only 2 kinds of queries as
  , find all numbers below N which are Triangular number as well as Pentagonal
  , find all numbers below N which are Pentagonal number as well as Hexagonal

"""
import itertools
import math


def pentagonals():
    """Yields pentagonals staring from 5."""
    p = 1
    for n in itertools.count(1):
        p += 3 * n + 1
        yield p


def triangles():
    """Yields triangles staring from 3."""
    t = 1
    for n in itertools.count(2):
        t += n
        yield t


def hexagonals():
    """Yields hexagonals staring from 6."""
    h = 1
    for n in itertools.count(1):
        h += 4 * n + 1
        yield h

# Iterators map
number_iterators = {3: triangles, 5: pentagonals, 6: hexagonals}


def search(it1, it2, n):
    """Find all equal pairs until n."""
    output = [1]
    n1 = next(it1)
    n2 = next(it2)
    while n1 < n and n2 < n:
        if n1 < n2:
            n1 = next(it1)
        if n2 < n1:
            n2 = next(it2)
        if n1 == n2:
            output.append(n1)
            n2 = next(it2)
    return output


# print(search(number_iterators[5](), number_iterators[6](), 10000000000))
n, a, b = map(int, input().split())
output = search(number_iterators[a](), number_iterators[b](), n)
for num in output:
    print(num)



