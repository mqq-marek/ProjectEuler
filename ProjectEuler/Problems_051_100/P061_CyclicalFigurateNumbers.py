"""
Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers
and are generated by the following formulae:
Triangle 	  	P3,n=n(n+1)/2 	  	1, 3, 6, 10, 15, ...
Square 	  	    P4,n=n2 	  	    1, 4, 9, 16, 25, ...
Pentagonal 	  	P5,n=n(3n−1)/2 	  	1, 5, 12, 22, 35, ...
Hexagonal 	  	P6,n=n(2n−1) 	  	1, 6, 15, 28, 45, ...
Heptagonal 	  	P7,n=n(5n−3)/2 	  	1, 7, 18, 34, 55, ...
Octagonal 	  	P8,n=n(3n−2) 	  	1, 8, 21, 40, 65, ...

The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

    The set is cyclic, in that the last two digits of each number is the first two digits of the next
    number (including the last number with the first).
    Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented
    by a different number in the set.
    This is the only set of 4-digit numbers with this property.

Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square,
pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.

"""
import itertools
from collections import defaultdict

polygonal = {3: lambda n: n * (n + 1) // 2,
             4: lambda n: n * n,
             5: lambda n: n * (3 * n - 1) // 2,
             6: lambda n: n * (2 * n - 1),
             7: lambda n: n * (5 * n - 3) // 2,
             8: lambda n: n * (3 * n - 2),
             }
value_map = {i: defaultdict(set) for i in range(3, 9)}
results = set()


def build_map():
    """Build 4 digits values for every polygon sequence stored as pair first two digits and list of last two digits."""
    for i in range(3, 9):
        func = polygonal[i]
        for j in itertools.count(15, 1):
            value = func(j)
            if value >= 10000:
                break
            if value > 1000:
                left, right = divmod(value, 100)
                if right < 10:
                    continue
                value_map[i][left].add(right)

def polygon_pairs(i):
    """Generate all two digits pairs for given polygon sequence."""
    for k, v in value_map[i].items():
        for l in v:
            yield k, l


def sum_elements(elems):
    """Sum numbers stored as sequence of two digits pairs."""
    nums = [a * 100 + b for a, b in zip(elems, elems[1:])]
    if len(nums) == len(set(nums)):
        return sum(nums)
    return 0


def search(elems, nums):
    """Search possible sequences composed of nums, result in elems."""
    if nums:
        join = value_map[nums[-1]].get(elems[-1])
        if join:
            for n in join:
                search(elems + [n], nums[:-1])
    else:
        if elems[0] == elems[-1]:
            nums_sum = sum_elements(elems)
            if nums_sum:
                results.add(nums_sum)


def lookup(nums):
    """Initialize lookup for given nums list."""
    for k, l in polygon_pairs(nums[-1]):
        for items in itertools.permutations(nums[:-1]):
            search([k, l], list(items))
    for result in sorted(list(results)):
        print(result)


build_map()
nums = [3, 4, 5, 6, 7, 8]
t = int(input())
nums = sorted(list(map(int, input().split())))
lookup(nums)

